name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  DOCKER_IMAGE_NAME: casebuilder
  DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
  DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
  DATABASE_URL: postgresql+asyncpg://postgres:postgres@localhost:5432/test_db
  TEST_ENV: true
  PYTHON_VERSION: '3.10'

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:14-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: --entrypoint redis-server

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-asyncio
    
    - name: Run tests with coverage
      env:
        DATABASE_URL: ${{ env.DATABASE_URL }}
        TEST_ENV: ${{ env.TEST_ENV }}
      run: |
        pytest -v --cov=./ --cov-report=xml
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  build-and-push:
    name: Build and Push Docker Image
    needs: test
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ env.DOCKERHUB_USERNAME }}
        password: ${{ env.DOCKERHUB_TOKEN }}
    
    - name: Extract metadata (tags, labels) for Docker
      id: meta
      uses: docker/metadata-action@v4
      with:
        images: ${{ env.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}
        tags: |
          type=raw,value=latest,enable=${{ github.ref == format('refs/heads/{0}', 'main') }}
          type=raw,value=develop,enable=${{ github.ref == format('refs/heads/{0}', 'develop') }}
          type=sha,format=short
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy-staging:
    name: Deploy to Staging
    needs: build-and-push
    if: github.ref == 'refs/heads/develop'
    runs-on: ubuntu-latest
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Copy .env file
      run: |
        echo "${{ secrets.STAGING_ENV_FILE }}" > .env
    
    - name: Install SSH key
      uses: webfactory/ssh-agent@v0.8.0
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
    
    - name: Add known hosts
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.KNOWN_HOSTS }}" >> ~/.ssh/known_hosts
    
    - name: Deploy to staging server
      run: |
        ssh ${{ secrets.STAGING_SSH_USER }}@${{ secrets.STAGING_SSH_HOST }} \
          "cd /path/to/staging && \
           git pull && \
           docker-compose -f docker-compose.staging.yml pull && \
           docker-compose -f docker-compose.staging.yml up -d --build"

  deploy-production:
    name: Deploy to Production
    needs: [test, build-and-push]
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Copy .env file
      run: |
        echo "${{ secrets.PRODUCTION_ENV_FILE }}" > .env
    
    - name: Install SSH key
      uses: webfactory/ssh-agent@v0.8.0
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
    
    - name: Add known hosts
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.KNOWN_HOSTS }}" >> ~/.ssh/known_hosts
    
    - name: Deploy to production server
      run: |
        ssh ${{ secrets.PROD_SSH_USER }}@${{ secrets.PROD_SSH_HOST }} \
          "cd /path/to/production && \
           git pull && \
           docker-compose -f docker-compose.prod.yml pull && \
           docker-compose -f docker-compose.prod.yml up -d --build"
