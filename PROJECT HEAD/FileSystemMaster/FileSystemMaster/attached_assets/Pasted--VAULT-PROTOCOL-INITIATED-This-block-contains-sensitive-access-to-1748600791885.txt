# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê üîê VAULT PROTOCOL INITIATED ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
# This block contains sensitive access tokens, API keys, and system credentials.
# It is protected under the Entropy Shield Protocol.
# 
# ‚ñ∏ Do not share outside of designated infrastructure zones.
# ‚ñ∏ These keys are intentionally exposed within encrypted ops layers.
# ‚ñ∏ Auto-ingest systems may decrypt using the associated .vault or Fernet key.
# 
# Format: Structured Key Vault for AI-Conscious Systems
# Parser Instructions:
# - Ignore comments and instructional lines (starting with '#')
# - Begin ingest at line with: ===BEGIN VAULT===
# - End ingest at: ===END VAULT===
# - Decryption key (if required) stored at: ~/.vault_key or .env['FERNET_KEY']
# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
===BEGIN VAULT===
## I OpenAI
- 
`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`

- 
`sk-6l9UvPJaVhx458NbJ-941-0R_jhaZ-fvE41QpsYpTntYPEDpWZ3OFpDOUBPBjJ4PP3ojozC0ZWT3BlbkFJ5fMfO_9Vi4olJslhQmfsuXCKfa7A9AS673aGp3q7-8W3Y0fbBo2RHQmBWzAT1fD4kk3ludLjAA-`windsurfsk-proj-E6OUEQ4hC4ITj0qCmIQ8wbAOI8k7f35VESY_nDLvZLrkRU0Z9t2TKgTDOeDgWPfBYPCEhPMvzpT3BlbkFJTwwV-4KaEB6UP4FHXSJkkj6TfK01q7tI-ynNcT4yviP9CZt0bbLrHja23c12xr_1ViY7BjbrIAmemory vault
casey@hi-classhomeservices.com
AIzaSyD4Tj_eq03QP3YgkXaCN9xWyM2LcnkOPPI - Gemini
CH - openAI
Neo4j_3l4uCmEA-xkhdQNiaCfgM-HHS0EHXTM1b40Mwc6vXoPostgres- windsurf prisma prisma+postgres://[accelerate.prisma-data.net/?api_key=prisma+postgres://accelerate.prisma-data.net/?api_key=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhcGlfa2V5IjoiMDFKVlJIUzJKUjhZMUpHRTVRN1lYUFBCSzIiLCJ0ZW5hbnRfaWQiOiI5OWUwZTA3YWEyYTJjOWVmNmY5ZDE2NzMzOTliMzRmOTIzMDJjYzgzNTBlMmFlYWQ3OWQyOTkzODkwMjQ4NGM3IiwiaW50ZXJuYWxfc2VjcmV0IjoiMWM1NzNkNDctMGQzYy00YTA4LTkwODktY2RhY2JjNjRiZThiIn0.iQyNAGc9I0t8MpSp1qRrL9t_r3MR4fWKizHReGlmTOs](http://accelerate.prisma-data.net/?api_key=prisma+postgres://accelerate.prisma-data.net/?api_key=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhcGlfa2V5IjoiMDFKVlJIUzJKUjhZMUpHRTVRN1lYUFBCSzIiLCJ0ZW5hbnRfaWQiOiI5OWUwZTA3YWEyYTJjOWVmNmY5ZDE2NzMzOTliMzRmOTIzMDJjYzgzNTBlMmFlYWQ3OWQyOTkzODkwMjQ4NGM3IiwiaW50ZXJuYWxfc2VjcmV0IjoiMWM1NzNkNDctMGQzYy00YTA4LTkwODktY2RhY2JjNjRiZThiIn0.iQyNAGc9I0t8MpSp1qRrL9t_r3MR4fWKizHReGlmTOs)memsk-mem-5b91acf3-cf84-4ec9-949e-456203475fa3
`os.environ["HUGGINGFACE_API_TOKEN"] = "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"`
supabase eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6IndpYnZxamRqZXdmdmh3dXh2YnlzIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDY1MDY2MDgsImV4cCI6MjA2MjA4MjYwOH0.NCFXtac58uD8xyod9o7S7AJShnK9sJ4F377a6wCwzA0glaciereq supabasesbp_5e354f2c96f18b94c9ac03e992560fca7073c2f7

- 
elevenlabssk_7ba5561fd9b8e04636ed42aa76556682e55066d470968ad6pineconepcsk_69yXbV_ScG9tJBY7Qx1e2C9dcqQtJJ6yqUGGtZyfbKsRgHrZ26kxszsdJTQnn6zc498eqHhiguy.vidspcsk_2DjXch_JNueamvbAC937LNr1dCrGwPAbhLYbd1E1k5zemVy5MNbiMsks8rJfAmu5rHWbhdfrom pinecone import Pinecone
pc = Pinecone("pcsk_2DjXch_JNueamvbAC937LNr1dCrGwPAbhLYbd1E1k5zemVy5MNbiMsks8rJfAmu5rHWbhd")
query "Tell me about Apple's products" results pc.inference.rerank( model="cohere-rerank-3.5", query=query, documents=[ "Apple is a popular fruit known for its sweetness and crisp texture.", "Apple is known for its innovative products like the iPhone.", "Many people enjoy eating apples as a healthy snack.", "Apple Inc. has revolutionized the tech industry with its sleek designs and user-friendly interfaces.", "An apple a day keeps the doctor away, as the saying goes.", ], top_n=3, return_documents=True, ) print(query) for r in [results.data](http://results.data): print(r.score, r.document.text)from pinecone import Pinecone pc Pinecone(api_key"pcsk_2DjXch_JNueamvbAC937LNr1dCrGwPAbhLYbd1E1k5zemVy5MNbiMsks8rJfAmu5rHWbhd")
assistant pc.assistant.create_assistant( assistant_name"example-assistant", instructions="Answer in polite, short sentences. Use American English spelling and vocabulary.", timeout=30 # Wait 30 seconds for assistant operation to complete. )Figmafigd_vXjO_AX9FKK9_YWzXR4Tnt2u_pGGy6ZVrfkpGXipperplexity -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`taskade - `SBsfQwDSXeRCmGDq ----[https://www.taskade.com/webcal?token=SBsfQwDSXeRCmGDq](https://www.taskade.com/webcal?token=SBsfQwDSXeRCmGDq)Confluence[https://id.atlassian.com/manage-profile/security/api-tokens](https://id.atlassian.com/manage-profile/security/api-tokens)ATATT3xFfGF0_eOclF--0uFEiiqUTTS0RbEBvsGHatszP-grPs6tQ-AuvozPhuda9zPfcqBW11yQSFUnebdIMGW8FJZdh5VBjfPDb4Dj2R5yc2bPU-vG7xFTD7h1nylgMSXTXAOdfyQF33LK3vca6nToo8ZMijjjUHwLevvyoERC2KrFm0xLuAs=8340653Bsmithery 7bc1cbd9-6079-4f0a-b5f7-260d11900e4banthropic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 MCP integration env FIRECRAWL_API_KEY=fc-8b09c61828084bdc9c973224a981ec5a npx -y firecrawl-mcpDigital ForensicspostgreswindsurfeyJhbGciOiJSUzI1NiIsImtpZCI6IjY3ZDhjZWU0ZTYwYmYwMzYxNmM1ODg4NTJiMjA5MTZkNjRjMzRmYmEiLCJ0eXAiOiJKV1QifQ.eyJuYW1lIjoiSGkgR3V5IFJldmlld3MiLCJwaWN0dXJlIjoiaHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jTEd0MUxKQ3NsV1FBMVgyakRsa1p1cVVCMW5hRjRySmZybVlnU1luZTRwdk1QcmN3PXM5Ni1jIiwiaXNzIjoiaHR0cHM6Ly9zZWN1cmV0b2tlbi5nb29nbGUuY29tL2V4YTItZmIxNzAiLCJhdWQiOiJleGEyLWZiMTcwIiwiYXV0aF90aW1lIjoxNzQ3MzgwODk2LCJ1c2VyX2lkIjoiZDM0dEZRczdXUFBMVWluR2xOZ1FiSG1HRHJzMSIsInN1YiI6ImQzNHRGUXM3V1BQTFVpbkdsTmdRYkhtR0RyczEiLCJpYXQiOjE3NDc3MDk3NzAsImV4cCI6MTc0NzcxMzM3MCwiZW1haWwiOiJoaWd1eS52aWRzQGdtYWlsLmNvbSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJmaXJlYmFzZSI6eyJpZGVudGl0aWVzIjp7Imdvb2dsZS5jb20iOlsiMTAyNzA0ODc3NzA2NDYwMTA4MzQ4Il0sImVtYWlsIjpbImhpZ3V5LnZpZHNAZ21haWwuY29tIl19LCJzaWduX2luX3Byb3ZpZGVyIjoiZ29vZ2xlLmNvbSJ9fQ.mlSIatYiMV6w9UYdaKLTd1qK4bfJm8CeAh3WJY0t0v9e630ekN8U8G-S5xLC2dDAovJf_ftxP8OwuYxbPyZwbfZewzrma-snOO-K9jUJiBy4ctcWw4GcXWdgrvMjfldd5JnFCCJ7in6QWfvml9bxr0tCsDiNa--opbfXNd40sgB2tUyZh_Uz22ptR9Tw0FCdbbZl-IIEonayySGnVO_ncaJtfqMbpyMPe_kMluCSq3vSq5pqmJxo2B5X1TDRTNni0JGkaCOBgi_R0drrqzsWrMqZz3fSnk0F6b9ZQ6z4JFg1oeUNZe3Y6Oi8Um3ym0J8TTfcLNHGt-mTBtyFZuFo6A
# Awesome Forensics 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
hugface toks hf_zQMZwuPGrynmpfAYAtJWwLCBRbCIMmfWXmapryse sdk
demo:1741412283339:6140ab060300000000e30d4612abaccc3cb7b7e434cc30ef8c5aed70a9
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


## herd trail - agent web browser eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjhkZDIxYjY2LTUyN2QtNGVmMi04ZWUyLTQ3OWQyMzg3MTU4ZCIsImlhdCI6MTc0Njc5NzA2NiwiZXhwIjoxNzQ3NDAxODY2fQ.D21VnGnRbSdsbcJklrnoOC3S5P-inofgj6ex9enmiWAMicrosoft tenant association keyeyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJodHRwOi8vc2NoZW1hcy5taWNyb3NvZnQuY29tL2lkZW50aXR5L2NsYWltcy90ZW5hbnRpZCI6IjIxYzQ0MjBjLTFiOWEtNGU2Yy1iZDY3LWY3MDMwYTk5ZmU4ZSIsImFwcGlkIjoiM2NmNmRmOTItMjc0NS00ZjZmLWJiY2YtMTliNTliY2RiNjJhIiwiaXNzIjoiSXNzdWVyIiwiYXVkIjoiQXVkaWVuY2UifQ.pRgaDd5gjgzTcHsr6PJ2BIEHstshrkjzshlw7FgsOYkSupermemorysm_eWxFPVM3zr6qepNiudZMnk_OnqIIVxwqXKeGoevncrGNtFtRhCcstBAFDzUVtGqeVnZACuprUsFJnjEyqCQZKCbRender rnd_ry616oPbo5b3IWh3mnkL34zMfiPKNebius AI studio (mixtral etc etc)eyJhbGciOiJIUzI1NiIsImtpZCI6IlV6SXJWd1h0dnprLVRvdzlLZWstc0M1akptWXBvX1VaVkxUZlpnMDRlOFUiLCJ0eXAiOiJKV1QifQ.eyJzdWIiOiJnb29nbGUtb2F1dGgyfDEwMjcwNDg3NzcwNjQ2MDEwODM0OCIsInNjb3BlIjoib3BlbmlkIG9mZmxpbmVfYWNjZXNzIiwiaXNzIjoiYXBpX2tleV9pc3N1ZXIiLCJhdWQiOlsiaHR0cHM6Ly9uZWJpdXMtaW5mZXJlbmNlLmV1LmF1dGgwLmNvbS9hcGkvdjIvIl0sImV4cCI6MTkwMzkzMTgxMywidXVpZCI6IjIzNTNlZGNlLTI1NDctNDQxMi1iNzQ0LTg2MzZmZGQyM2YwNSIsIm5hbWUiOiJGSVJTVCIsImV4cGlyZXNfYXQiOiIyMDMwLTA1LTAyVDA1OjU2OjUzKzAwMDAifQ.NxE-61dcNaSG8NnAapVA1OrXdyngS_14lXoINV65r5ETogether.ai191412b05c84c4ef9ad3496915d82796cf77945682d1c82802a17e503bddde66
cohere nfb4zwIngxM4PnHBXYdZmSFleOHFsY20eI6z8N84GitHub
- 
`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`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[https://github.com/GlacierEQ/Omni_Engine](https://github.com/GlacierEQ/Omni_Engine)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


## Google API
- 
`AIzaSyBieK9LLrpr5M0QnRcNb9Ldc9_5-iqwz_I``googlw drive `AIzaSyD4Tj_eq03QP3YgkXaCN9xWyM2LcnkOPPI


## Hugging Face
- 
`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`


## Gemini Code Assist
- 
Project: `gen-lang-client-0989180027`


## Natif Document Processing
- 
`3sVc6I_BViLxgKHFCvF0bHWZidjyqoHO`


## DeepSeek
base_url *‚ÄÉ‚ÄÉ‚ÄÉ‚ÄÉ‚ÄÉ‚ÄÉ‚ÄÉ`https://api.deepseek.com`
- 
`sk-c9e21ddc0f8d4ec8a32312492e961f7d`

- 
sk-0ae828346c41468b8e2fe55d64a13c0csk-586b354231ff4792b3ed81ece1eef0d0


## OpenRouter
- 
`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`sk-or-v1-85345f752f4be8b0e95e44111a657d2088ad857b894f3e543181f4b623da08fdopen router management key

- 
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


langchain / langsmithlsv2_pt_13e70bd1351044a79996ee0588f46f6b_7ea8918dda
postman api - PMAK-67f5951a97c39100012ba971-7aa43eb55355afd32f086a55a28050002f
## Snyk
- 
GitHub Container: `59c210b2-d130-4ca7-952d-a7a420368b05`


## Cody
- 
`sgp_fd1b4edb60bf82b8_76be640eebd2c173f595bfdca8b2504431df80bf`


## AgentOps
- 
`6seu3IllXdpsv-TJBzKDFOIy3qhWiRJrCzf9zxlw-4c`


## Zamar
- 
`8c84364eeea600b8029080e21e1c99277f0fdfbe`


## PDF4ME
- 
Primary: `NTc5YmZlYmUtNmM3ZC00ZjhlLTg0ZGItMTNlYmJhMTk0NzQ2OjhIRERGJTJHTmVtUDlPU0hXbEJWc25QdmJkSyVUU296`

- 
Secondary: `NTc5YmZlYmUtNmM3ZC00ZjhlLTg0ZGItMTNlYmJhMTk0NzQ2OnclZjA4a2VwbWdqMU84YTVvWWcyT3NrRVk4UG0wUm5m`GeminiAIzaSyD4Tj_eq03QP3YgkXaCN9xWyM2LcnkOPPI

- 
demo:1741412283339:6140ab060300000000e30d4612abaccc3cb7b7e434cc30ef8c5aed70a9
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tisane primary 1741794207b944a4b4722c717fb03928 secondary 60352e4ade5242f4a50730e7c2b0044c NLP


To utilize these API keys and tokens effectively:
1. 
Store them securely: Use environment variables or a secure secret management system to store these keys


- 
.

- 
Implement access controls: Restrict access to these keys to only those who need them

- 
.

- 
Use HTTPS: Always use HTTPS when making API calls to ensure encrypted communication

- 
.

- 
Implement key rotation: Regularly rotate these keys to minimize the risk of compromised keys

- 
.

- 
Monitor usage: Keep track of API usage to detect any unusual patterns that might indicate misuse

- 
.

- 
Use granular permissions: When possible, assign only the necessary permissions to each key

- 
.

- 
Validate keys: Before using, ensure the keys are still valid and have not expired

- 
.

- 
Error handling: Implement proper error handling for cases where API calls fail due to invalid or expired keys

- 
.

- 
Rate limiting: Respect rate limits imposed by the API providers to avoid service disruptions

- 
.

- 
Version control: Keep track of which version of the API you're using and update your code when new versions are released


1. 
.


Remember to check the documentation for each specific API to ensure you're following their best practices and usage guidelinesgdrive sorter
To set up OAuth 2.0 for your Google Drive file organizer, you will need to follow these steps:
- 
**Go to the Google Cloud Console:** Access the Google Cloud Console and select your project, clear-heaven-449115-e2 .

- 
**Navigate to Credentials:** Find the "Credentials" section within your project's settings. The exact path may vary slightly depending on the current interface, but it is usually found under "APIs & Services".

- 
**Create OAuth 2.0 Client ID:** Click "Create Credentials" and select "OAuth client ID".

- 
**Choose Application Type:** Select "Web application" as the application type.

- 
**Name your Credentials:** Provide a descriptive name for your OAuth 2.0 client.

- 
**Add Authorized Redirect URIs:** This is crucial. You must add the URLs where Google will redirect the user after authentication. These are typically URLs in your application that handle the OAuth callback. Make sure these URLs are correct; incorrect URLs will prevent authentication from working.

- 
**Create and Download Credentials:** Click "Create." This will generate your OAuth 2.0 client ID and client secret. Download the JSON file containing this information and keep it secure. Do *not* hardcode these credentials directly into your application's code; use environment variables or a secure configuration management system.

- 
**Set up OAuth Consent Screen (if needed):** For certain scenarios, you might need to configure an OAuth consent screen. This screen is what the user sees when they grant permission to your application to access their Google Drive data. You'll need to provide an application name, contact information, and other relevant details.


[keshhaav/Gdrive-organizer-app: This app organizes your messy google drive not just on the basis on the file formats of your files but also the names using groq's mixtral AI](https://github.com/keshhaav/Gdrive-organizer-app)google drive APIAIzaSyAHPCpbLzr4V74UNEtEFMHAyE-Q2HCrNnIgOOGLE dRIVE OAUTHCLIENT - [655117977783-smj8ubt6vmba8a09f009govf68skgc83.apps.googleusercontent.com](http://655117977783-smj8ubt6vmba8a09f009govf68skgc83.apps.googleusercontent.com)CLIENT SECRET - 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
gsk_...iLa7
`GROQ_API_KEY = "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"  os.environ["HUGGINGFACE_API_TOKEN"] = "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"   Blackbox models are often used in machine learning and artificial intelligence, where the internal workings of the model are not transparent to the user. Here are some common blackbox models and their characteristics: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     memory plugin =LFvblPuL3N8N8k2FLyGcsCkMSMSrHsG9`
[**TypingMind**](https://www.typingmind.com/)
Plugin
# **MemoryPlugin**
[**‚ÜíImport to TypingMind**](https://www.typingmind.com/?import_plugin=p-01JFW700XGDXQ2WPJPW2JXN8MX)
**Overview:**
## **MemoryPlugin**
Enable your Al to remember things about you across conversations, allowing it to get to know you over time.No more repeating the same information in every new chat.
Works with TypingMind, ChatGPT, Claude, Gemini, and more!
**OpenAI Function Spec:**primary - LFvblPuL3N8N8k2FLyGcsCkMSMSrHsG9
specialized - yD4IKCdlI0VCXlfD4xLT1x5D0dEU9Hd1
`{   "name": "memory_plugin",   "parameters": {     "type": "object",     "required": [       "mode"     ],     "properties": {       "mode": {         "enum": [           "store",           "search",           "load_all",           "load_bucket"         ],         "type": "string",         "description": "Required. Mode of operation:\n- 'store': Add memories proactively when you detect important information or when the user uses '\\m'.\n- 'search': Use to find specific memories. This is the default mode for looking up information.\n- 'load_all': ONLY use when explicitly requested by user. Never use this mode automatically.\n- 'load_bucket': **Use this mode to load memories from a specific bucket when the user instructs you to do so.**"       },       "query": {         "type": "string",         "description": "Search term to find specific memories. Required in 'search' mode. Only use search mode when you need to check for specific information and haven't loaded memories yet in this conversation."       },       "bucket": {         "type": "string",         "description": "Bucket name to store or load memories. **Required in 'load_bucket' mode when specified by the user.** Only use buckets if the user specifies one; do not create or assign buckets on your own."       },       "memory": {         "type": "string",         "description": "Text to remember. Required in 'store' mode. Be succinct and focus on important details."       }     }   },   "description": "MemoryPlugin stores and recalls user information for personalized interactions. Be proactive in storing relevant details without waiting for user prompts. If a message ends with '\\m', treat it as a request to remember the preceding information. Always check loaded memories for relevant details before asking the user. Store information succinctly.\n\n**Important:** When the user specifies a bucket (in the system prompt or a message), use 'load_bucket' mode with the provided 'bucket' parameter to load memories from that bucket. Do not use buckets unless explicitly instructed by the user.\n\nUse 'search' mode only when you need to look up specific information and haven't loaded memories yet in this conversation. Once you've loaded memories using either 'load_all' or 'load_bucket', just check those directly instead of using search.\n\nIf unsure about storing information, ask the user if they want it remembered. Use appropriate modes and parameters to store or fetch memories. Display any returned alerts to the user." }`
**Code Implementation:**
`const MP_API = "https://www.memoryplugin.com/api/"; // const MP_API = "http://localhost:3000/api/"; const MP_MEMORY_ENDPOINT = MP_API + "v2/memory?client=typingmind&version=4";  async function queryMemories(text, userSettings) {     // const memory = localStorage.getItem("tm_memories");     const res = await fetch(MP_MEMORY_ENDPOINT + "&" + new URLSearchParams({         query: text,         v: 2     }), {         method: "GET",         mode: "cors",         headers: {             "Content-Type": "application/json",             "Authorization": "Bearer " + userSettings.token         }     });     const memory = await res.json();     if (!memory) {         return [];     }     return memory; }  async function fetchAllMemories(userSettings) {     const res = await fetch(MP_MEMORY_ENDPOINT + "&all=true&v=2", {         method: "GET",         mode: "cors",         headers: {             "Content-Type": "application/json",             "Authorization": "Bearer " + userSettings.token         }     });      const memories = await res.json();     console.log("memories", memories);     if (!memories) {         return [];     }     return memories; }  async function fetchMemoriesFromBucket(userSettings, bucketId) {     const res = await fetch(MP_MEMORY_ENDPOINT + "&bucketId=" + bucketId, {         method: "GET",         mode: "cors",         headers: {             "Content-Type": "application/json",             "Authorization": "Bearer " + userSettings.token         }     });     const memories = await res.json();     return memories; }  async function addMemory(memory, bucketId, userSettings) {     // const existingMemory = await getExistingStorage();     const today = new Date();     // sanity check     if (today.getFullYear() > 2023) {         // format to YYYY-MM-DD         const formattingDate = today.toISOString().split("T")[0];         // if the memory doesn't start with a date, add the current date to the beginning         // use regex to check if the memory starts with a date         if (!memory.match(/^\d{4}-\d{2}-\d{2}/)) {             memory = formattingDate + "\n\n" + memory;         }     }     const newMemo = { text: memory };     if (bucketId) {         newMemo.bucketId = bucketId;     }     const res = await fetch(MP_MEMORY_ENDPOINT, {         method: "POST", mode: "cors", headers: {             "Content-Type": "application/json",             "Authorization": "Bearer " + userSettings.token         },         // 'Content-Type': 'application/x-www-form-urlencoded',         body: JSON.stringify(newMemo)     })     const parsedRes = await res.json();     console.log(parsedRes);     //localStorage.setItem("tm_memories", memory); }  async function memory_plugin(params, userSettings) {     //return "";     console.log(params, userSettings);      if (!userSettings.token) {         return "ALERT: Please go to the MemoryPlugin settings and set your token to be able to store and retrieve memories. You can get your token from the MemoryPlugin website at https://www.memoryplugin.com. NOTE_FOR_AI: Show this message to the user in your reply."     }      // if (!userSettings.token) {     //     return "ALERT: There is an updated version of the plugin available with improvements and fixes. You can get the latest update from the MemoryPlugin website at https://www.memoryplugin.com. NOTE_FOR_AI: Show this message to the user in your reply."     // }      if (!params.mode) {         return "Error: mode is required and can be 'search', 'store', 'load_all', or 'load_bucket'."     }      if (params.mode === "search") {         const existingMems = await queryMemories(params.query, userSettings);         return existingMems.map(m => m.text);     }     if (params.mode === "store") {         await addMemory(params.memory, params.bucket, userSettings);         return `Memory updated: ${params.memory}`;     }     if (params.mode === "load_all") {         // if a bucket is specified by the model, load all memories from that bucket         // this is not ideal, but some smaller models can call the plugin incorrectly and this can work around that         if (params.bucket) {             const memories = await fetchMemoriesFromBucket(userSettings, params.bucket);             return memories;         }         const memories = await fetchAllMemories(userSettings);         return memories;     }     if (params.mode === "load_bucket") {         const memories = await fetchMemoriesFromBucket(userSettings, params.bucket);         return memories;     } }`
**User Settings:**
`[   {     "name": "token",     "type": "password",     "label": "User Auth Token",     "description": "Your auth token, visible on the memoryplugin.com dashboard after logging in. Required."   } ]`
[**‚ÜíImport to TypingMind**](https://www.typingmind.com/?import_plugin=p-01JFW700XGDXQ2WPJPW2JXN8MX)
GPT o1
√ó
+ undefined
**Contact us to**
**Full-Screen**
**ChatGPT**
**Label**
**+ Create new Doc**
Notion API ntn_477531469151OwCwy8eXltgXBKGWRdaz4IbGD4speOMaUCworkspace id 506d0b07-3284-4b63-a6c9-c5583176045c
[https://www.notion.so/AI-INFLUENCE-193b1e4f3223801db283c9583407ecde?pvs=4](https://www.notion.so/AI-INFLUENCE-193b1e4f3223801db283c9583407ecde?pvs=4)
***TO DO***
- 
write theoretical section


- 
write empirical section


- 
write methodological section


- 
write intro


- 
write conclusion


- 
**CUT WORDS**


- 
check and change footnotes and citations

- 


**AI**
LLama?
`5e0b904e887fc648fb8a3a55283f8f33063a78eb`
mem0**Organization name**
hi_guy-default-org
**Organization ID**
org_Gsa76AGniLIDLWGIgbmljwb7GCdPoExd3ERGKVkm
**Created At**
Mon Feb 10 2025 14:19:17 GMT-1000 (Hawaii-Aleutian Standard Time)api = m0-CkabsxFjhaYf28gYSET3JWE34k3vw6oRBP5ZUm5Hmermaid46ed85bc-69e7-4484-9f02-d89a1b13bddf.7be877d9ccf09ebe07a09ad96a46362e9f10bd4ab748c7003545cb6ed9d57a7b873d7b144b0bbd20f0ab77a7687af1ef06f8a0e1a27274dd2b27aa651cb53c5024913a6cf297a78f263e32e7d973dd864793c698cb279d5cc9b768640cc533eb33adc979fb36b4b9e197d97ff228be978dd217a5526ab246b1b2f7cdb050e219a54be9559f7c7c5b4688dd9902d32f2ae0f5924b2a134b91e1e947b4610dce3140bc81f2fb560ca0f3eef2dea1c18d924cb9975a832005c4899bcc3484c09d4d6b1b9b9e8352165ba069f03efa2e8df2657ff46488f2a206542ec9316ee997855e13471dcfdcac0dc1dbf16a7f8e5a256da54ca79ee94c5e2e294ffe303753e3
__________________________________
# GROK
gdrive sorter
To set up OAuth 2.0 for your Google Drive file organizer, you will need to follow these steps:
- 
**Go to the Google Cloud Console:** Access the Google Cloud Console and select your project, clear-heaven-449115-e2 .

- 
**Navigate to Credentials:** Find the "Credentials" section within your project's settings. The exact path may vary slightly depending on the current interface, but it is usually found under "APIs & Services".

- 
**Create OAuth 2.0 Client ID:** Click "Create Credentials" and select "OAuth client ID".

- 
**Choose Application Type:** Select "Web application" as the application type.

- 
**Name your Credentials:** Provide a descriptive name for your OAuth 2.0 client.

- 
**Add Authorized Redirect URIs:** This is crucial. You must add the URLs where Google will redirect the user after authentication. These are typically URLs in your application that handle the OAuth callback. Make sure these URLs are correct; incorrect URLs will prevent authentication from working.

- 
**Create and Download Credentials:** Click "Create." This will generate your OAuth 2.0 client ID and client secret. Download the JSON file containing this information and keep it secure. Do *not* hardcode these credentials directly into your application's code; use environment variables or a secure configuration management system.

- 
**Set up OAuth Consent Screen (if needed):** For certain scenarios, you might need to configure an OAuth consent screen. This screen is what the user sees when they grant permission to your application to access their Google Drive data. You'll need to provide an application name, contact information, and other relevant details.


[keshhaav/Gdrive-organizer-app: This app organizes your messy google drive not just on the basis on the file formats of your files but also the names using groq's mixtral AI](https://github.com/keshhaav/Gdrive-organizer-app)
gsk_...iLa7
`GROQ_API_KEY = "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"  ======End Vault=======`