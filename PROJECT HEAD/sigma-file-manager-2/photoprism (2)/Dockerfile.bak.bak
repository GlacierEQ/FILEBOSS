# syntax=docker/dockerfile:1

# ----------- Build Stage -----------
ARG GO_VERSION=1.24.0
FROM golang:${GO_VERSION}-alpine AS builder

# Install build dependencies
RUN apk add --no-cache git

# Set working directory
WORKDIR /app

# Copy go.mod and go.sum first for dependency caching
COPY --link go.mod go.sum ./

# Download dependencies (with cache mounts)
RUN --mount=type=cache,target=/go/pkg/mod \
    --mount=type=cache,target=/root/.cache/go-build \
    go mod download

# Copy the rest of the source code
COPY --link . .

# Build the Go binary (static build)
RUN --mount=type=cache,target=/go/pkg/mod \
    --mount=type=cache,target=/root/.cache/go-build \
    CGO_ENABLED=0 GOOS=linux go build -ldflags="-s -w" -o photoprism ./main.go

# ----------- Final Stage -----------
FROM alpine:latest AS final

# Install runtime dependencies
RUN --mount=type=cache,target=/var/cache/apk \
    apk add --no-cache ca-certificates

# Create non-root user
RUN addgroup -S photoprism && adduser -S photoprism -G photoprism

WORKDIR /app

# Copy the built binary from builder
COPY --from=builder /app/photoprism /app/photoprism

# Copy static assets, templates, and other runtime files as needed
COPY --link assets ./assets
COPY --link static ./static
COPY --link templates ./templates

# Set permissions
RUN chown -R photoprism:photoprism /app

USER photoprism

EXPOSE 2342

ENTRYPOINT ["/app/photoprism"]
