# PhotoPrism Advanced Build System
# A sophisticated build system integrating Make, CMake, and Ninja

# Environment variables
BUILD_DIR ?= build
CMAKE_BUILD_TYPE ?= Release
CMAKE_GENERATOR ?= Ninja
INSTALL_DIR ?= dist
NINJA_JOBS ?= 0
NINJA_TEAM_SIZE ?= 4
NINJA_RECURSION_LEVELS ?= 3

# Detect operating system
ifeq ($(OS),Windows_NT)
    DETECTED_OS := Windows
    SHELL := powershell.exe
    RM := Remove-Item -Recurse -Force
    MKDIR := New-Item -ItemType Directory -Force -Path
    EXE_SUFFIX := .exe
    SEPARATOR := ;
else
    DETECTED_OS := $(shell uname -s)
    RM := rm -rf
    MKDIR := mkdir -p
    EXE_SUFFIX := 
    SEPARATOR := :
endif

# Detect number of CPU cores for parallel builds
ifeq ($(NINJA_JOBS),0)
    ifeq ($(DETECTED_OS),Windows)
        CPU_COUNT := $(shell $(WMIC) CPU Get NumberOfLogicalProcessors | findstr /R "[0-9]")
    else ifeq ($(DETECTED_OS),Darwin)
        CPU_COUNT := $(shell sysctl -n hw.ncpu)
    else
        CPU_COUNT := $(shell nproc)
    endif
    NINJA_JOBS := $(CPU_COUNT)
endif

# Check if tools are available
HAVE_CMAKE := $(shell which cmake >/dev/null 2>&1 && echo 1 || echo 0)
HAVE_NINJA := $(shell which ninja >/dev/null 2>&1 && echo 1 || echo 0)
HAVE_GO := $(shell which go >/dev/null 2>&1 && echo 1 || echo 0)
HAVE_NPM := $(shell which npm >/dev/null 2>&1 && echo 1 || echo 0)
HAVE_DOCKER := $(shell which docker >/dev/null 2>&1 && echo 1 || echo 0)

# Set build flags
CMAKE_FLAGS := -DCMAKE_BUILD_TYPE=$(CMAKE_BUILD_TYPE) \
               -DBUILD_TESTING=ON \
               -DENABLE_BRAINS=ON \
               -DCMAKE_EXPORT_COMPILE_COMMANDS=ON

ifeq ($(HAVE_NINJA),1)
    CMAKE_FLAGS += -G Ninja
    BUILD_TOOL := ninja
    BUILD_FLAGS := -j $(NINJA_JOBS)
else
    ifeq ($(DETECTED_OS),Windows)
        CMAKE_FLAGS += -G "NMake Makefiles"
        BUILD_TOOL := nmake
    else
        CMAKE_FLAGS += -G "Unix Makefiles"
        BUILD_TOOL := make
        BUILD_FLAGS := -j $(NINJA_JOBS)
    endif
endif

# Set Go build tags based on build type
ifeq ($(CMAKE_BUILD_TYPE),Debug)
    GO_BUILD_TAGS := debug,develop,brains
else ifeq ($(CMAKE_BUILD_TYPE),Release)
    GO_BUILD_TAGS := brains
else ifeq ($(CMAKE_BUILD_TYPE),RelWithDebInfo)
    GO_BUILD_TAGS := debug,brains
else
    GO_BUILD_TAGS := brains
endif

# Default target
.PHONY: all
all: build

# Show help
.PHONY: help
help:
	@echo "PhotoPrism Advanced Build System"
	@echo ""
	@echo "Available targets:"
	@echo "  help       - Show this help message"
	@echo "  init       - Initialize the build system"
	@echo "  configure  - Configure the build"
	@echo "  build      - Build the project"
	@echo "  test       - Run tests"
	@echo "  install    - Install the application"
	@echo "  clean      - Clean build files"
	@echo "  distclean  - Remove all generated files"
	@echo "  docker     - Build Docker images"
	@echo "  deploy     - Deploy the application"
	@echo "  models     - Download AI models"
	@echo ""
	@echo "Build variables:"
	@echo "  BUILD_DIR=$(BUILD_DIR)"
	@echo "  CMAKE_BUILD_TYPE=$(CMAKE_BUILD_TYPE)"
	@echo "  CMAKE_GENERATOR=$(CMAKE_GENERATOR)"
	@echo "  INSTALL_DIR=$(INSTALL_DIR)"
	@echo "  NINJA_JOBS=$(NINJA_JOBS)"
	@echo ""
	@echo "System information:"
	@echo "  OS: $(DETECTED_OS)"
	@echo "  CPU Cores: $(CPU_COUNT)"
	@echo "  Tools:"
	@echo "    - CMake: $(HAVE_CMAKE)"
	@echo "    - Ninja: $(HAVE_NINJA)"
	@echo "    - Go: $(HAVE_GO)"
	@echo "    - npm: $(HAVE_NPM)"
	@echo "    - Docker: $(HAVE_DOCKER)"

# Check required tools
.PHONY: check-tools
check-tools:
	@if [ $(HAVE_CMAKE) -eq 0 ]; then echo "Error: CMake is not installed"; exit 1; fi
	@if [ $(HAVE_GO) -eq 0 ]; then echo "Error: Go is not installed"; exit 1; fi

# Initialize the build system
.PHONY: init
init: check-tools
	@echo "Initializing build system..."
	@$(MKDIR) $(BUILD_DIR)
	@$(MKDIR) $(INSTALL_DIR)
	@if [ $(HAVE_NPM) -eq 1 ]; then \
		cd frontend && npm ci --no-update-notifier --no-audit; \
	fi

# Configure the build
.PHONY: configure
configure: init
	@echo "Configuring build..."
	@cd $(BUILD_DIR) && cmake $(CMAKE_FLAGS) ..

# Build the project
.PHONY: build
build: configure
	@echo "Building project with $(BUILD_TOOL)..."
	@cd $(BUILD_DIR) && $(BUILD_TOOL) $(BUILD_FLAGS)

# Run tests
.PHONY: test
test: build
	@echo "Running tests..."
	@cd $(BUILD_DIR) && ctest -V

# Install the application
.PHONY: install
install: build
	@echo "Installing to $(INSTALL_DIR)..."
	@cd $(BUILD_DIR) && cmake --install . --prefix "$(INSTALL_DIR)"

# Clean build files
.PHONY: clean
clean:
	@echo "Cleaning build files..."
	@if [ -d "$(BUILD_DIR)" ]; then \
		cd $(BUILD_DIR) && $(BUILD_TOOL) clean; \
	fi

# Remove all generated files
.PHONY: distclean
distclean:
	@echo "Removing all generated files..."
	@$(RM) $(BUILD_DIR)
	@$(RM) $(INSTALL_DIR)

# Build Docker images
.PHONY: docker
docker:
	@echo "Building Docker images..."
	@if [ $(HAVE_DOCKER) -eq 1 ]; then \
		docker compose -f docker/docker-compose.prod.yml build; \
	else \
		echo "Error: Docker is not installed"; \
		exit 1; \
	fi

# Deploy the application
.PHONY: deploy
deploy: build docker
	@echo "Deploying application..."
	@./scripts/deploy-production.sh

# Download AI models
.PHONY: models
models:
	@echo "Downloading AI models..."
	@./scripts/download-brains.sh
	@./scripts/download-facenet.sh
	@./scripts/download-nasnet.sh

# Frontend build
.PHONY: frontend
frontend:
	@echo "Building frontend..."
	@if [ $(HAVE_NPM) -eq 1 ]; then \
		cd frontend && npm run build; \
	else \
		echo "Error: npm is not installed"; \
		exit 1; \
	fi

# Generate compilation database for IDE integration
.PHONY: compdb
compdb: configure
	@echo "Generating compilation database..."
	@if [ -f "$(BUILD_DIR)/compile_commands.json" ]; then \
		cp $(BUILD_DIR)/compile_commands.json .; \
	fi

# Ninja Team targets
.PHONY: team-deploy
team-deploy:
	@echo "Deploying with ninja team..."
	@TEAM_SIZE=$(NINJA_TEAM_SIZE) DEPLOYMENT_LEVELS=$(NINJA_RECURSION_LEVELS) ./scripts/ninja-team-deploy.sh

.PHONY: team-init
team-init:
	@echo "Initializing ninja team..."
	@mkdir -p config
	@if [ ! -f config/ninja-team.yml ]; then \
		cp scripts/templates/ninja-team.yml.example config/ninja-team.yml; \
		echo "Created default ninja team configuration"; \
	else \
		echo "Ninja team configuration already exists"; \
	fi
	@mkdir -p $(BUILD_DIR)
	@for i in $$(seq 1 $(NINJA_TEAM_SIZE)); do \
		mkdir -p $(BUILD_DIR)/ninja-$$i; \
		echo "Initialized build directory for ninja $$i"; \
	done

.PHONY: team-clean
team-clean:
	@echo "Cleaning ninja team build artifacts..."
	@for i in $$(seq 1 $(NINJA_TEAM_SIZE)); do \
		rm -rf $(BUILD_DIR)/ninja-$$i; \
		echo "Cleaned build directory for ninja $$i"; \
	done

.PHONY: team-status
team-status:
	@echo "Checking ninja team status..."
	@if [ -f $(BUILD_DIR)/deployment-status.json ]; then \
		cat $(BUILD_DIR)/deployment-status.json; \
	else \
		echo "No deployment status found"; \
	fi
	@for i in $$(seq 1 $(NINJA_TEAM_SIZE)); do \
		if [ -f $(BUILD_DIR)/ninja-$$i/agent-info.json ]; then \
			echo "Agent $$i:"; \
			cat $(BUILD_DIR)/ninja-$$i/agent-info.json; \
		else \
			echo "Agent $$i: Not initialized"; \
		fi; \
	done

.PHONY: team-test
team-test:
	@echo "Testing ninja team deployment with minimal configuration..."
	@TEAM_SIZE=2 DEPLOYMENT_LEVELS=2 BUILD_MODE="sequential" ./scripts/ninja-team-deploy.sh

# Include custom targets
include scripts/ninja/custom.mk
