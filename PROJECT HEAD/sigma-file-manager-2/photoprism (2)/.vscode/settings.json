{
  "// DeepSoul Supreme Optimization Protocol": "Configuration for enhanced GitHub Copilot performance",
  "github.copilot.enable": true,
  "github.copilot.advanced": {
    "enableContextAwareness": true,
    "adaptiveCodeExpansion": true,
    "multiPassRefinement": true,
    "optimizedResourceAllocation": true,
    "universalCompatibility": true,
    "maxCodeLength": 1000,
    "maxTokens": 2048
  },
  "github.copilot.chat.codeGeneration.instructions": [
    "Generate code with full understanding of surrounding context.",
    "Ensure all functions and objects interact seamlessly.",
    "Follow SOLID principles and DRY methodology in all generated code.",
    "Create production-ready code with proper error handling and validation.",
    "Implement automated performance benchmarks where appropriate.",
    "Use environment variables/config files instead of hardcoded values.",
    "Enforce input sanitization and security best practices.",
    "Use async/await for asynchronous operations.",
    "Implement logging and monitoring for critical components."
  ],
  "github.copilot.chat.reviewSelection.instructions": [
    "Ensure AI-generated code follows SOLID principles.",
    "Identify and remove redundant calculations.",
    "Enforce best security practices (sanitization, auth checks).",
    "Check for potential memory leaks in resource management.",
    "Verify cross-platform compatibility of suggested code.",
    "Check for potential performance bottlenecks.",
    "Verify code adheres to project coding standards."
  ],
  "github.copilot.chat.commitMessageGeneration.instructions": [
    "Create descriptive, concise commit messages.",
    "Include the scope of changes in the commit message.",
    "Follow conventional commit format where appropriate.",
    "Ensure that commits pass stability tests before submission.",
    "Include relevant issue numbers or references."
  ],
  "editor.formatOnSave": true,
  "editor.codeActionsOnSave": {
    "source.fixAll": "explicit",
    "source.organizeImports": "explicit"
  },
  "explorer.fileNesting.enabled": true,
  "explorer.fileNesting.patterns": {
    "*.ts": "${capture}.js, ${capture}.d.ts, ${capture}.test.ts",
    "*.go": "${capture}_test.go",
    "*.sh": "${capture}.bash, ${capture}.ps1"
  },
  "terminal.integrated.env.linux": {
    "PHOTOPRISM_EXPERIMENTAL": "true",
    "PHOTOPRISM_THUMB_FILTER": "lanczos",
    "PHOTOPRISM_THUMB_QUALITY": "90"
  },
  "terminal.integrated.env.osx": {
    "PHOTOPRISM_EXPERIMENTAL": "true",
    "PHOTOPRISM_THUMB_FILTER": "lanczos",
    "PHOTOPRISM_THUMB_QUALITY": "90"
  },
  "terminal.integrated.env.windows": {
    "PHOTOPRISM_EXPERIMENTAL": "true",
    "PHOTOPRISM_THUMB_FILTER": "lanczos",
    "PHOTOPRISM_THUMB_QUALITY": "90"
  },
  "openai-forge.customEvaluators": [
    {
      "command": "npm",
      "commandArgs": [
        "run",
        "lint"
      ],
      "extensions": [
        ".js",
        ".jsx"
      ]
    },
    {
      "command": "tsc",
      "commandArgs": [
        "--noEmit"
      ],
      "extensions": [
        ".ts",
        ".tsx"
      ]
    },
    {
      "command": "eslint",
      "commandArgs": [
        "--fix"
      ],
      "extensions": [
        ".js",
        ".jsx",
        ".ts",
        ".tsx"
      ]
    },
    {
      "command": "stylelint",
      "commandArgs": [
        "--fix"
      ],
      "extensions": [
        ".css",
        ".scss"
      ]
    },
    {
      "command": "webpack",
      "commandArgs": [
        "--config",
        "webpack.prod.config.js"
      ],
      "extensions": [
        ".js",
        ".jsx",
        ".ts",
        ".tsx"
      ]
    }
  ],
  "bevel.largeLanguageModel": "LOCAL"
}