name: Ninja Team CI/CD

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, develop ]

jobs:
  prepare:
    name: Prepare Ninja Team
    runs-on: ubuntu-latest
    outputs:
      team_size: ${{ steps.config.outputs.team_size }}
      recursion_levels: ${{ steps.config.outputs.recursion_levels }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up environment
        id: config
        run: |
          echo "::set-output name=team_size::$(grep -o 'size: [0-9]*' config/ninja-team.yml | awk '{print $2}')"
          echo "::set-output name=recursion_levels::$(grep -o 'recursion_levels: [0-9]*' config/ninja-team.yml | awk '{print $2}')"

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y ninja-build
          
      - name: Validate ninja team config
        run: |
          python -c "import yaml; yaml.safe_load(open('config/ninja-team.yml'))"

  build-ninja-agents:
    name: Build Ninja Agent ${{ matrix.agent_id }}
    needs: prepare
    runs-on: ubuntu-latest
    strategy:
      matrix:
        agent_id: ${{ fromJson(format('[{0}]', join(',', range(1, needs.prepare.outputs.team_size)))) }}
        include:
          - agent_id: 1
            specialization: frontend
          - agent_id: 2
            specialization: backend
          - agent_id: 3
            specialization: database
          - agent_id: 4
            specialization: ai
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: '1.21'

      - name: Set up Node.js
        if: matrix.specialization == 'frontend'
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Create build directory
        run: mkdir -p build/ninja-${{ matrix.agent_id }}

      - name: Run ninja agent
        run: |
          AGENT_ID=${{ matrix.agent_id }} SPECIALIZATION=${{ matrix.specialization }} ./scripts/ninja-agent.sh || exit 1

      - name: Upload agent artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ninja-agent-${{ matrix.agent_id }}-artifacts
          path: build/ninja-${{ matrix.agent_id }}/artifacts/
          retention-days: 1
      - name: Capture agent logs
        if: failure()
        run: |
          echo "Agent ${{ matrix.agent_id }} logs:"
          cat build/ninja-${{ matrix.agent_id }}/agent-${{ matrix.agent_id }}.log

  recursive-deployment:
    name: Recursive Deployment Level ${{ matrix.level }}
    needs: [prepare, build-ninja-agents]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        level: ${{ fromJson(format('[{0}]', join(',', range(1, needs.prepare.outputs.recursion_levels)))) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download all agent artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts/

      - name: Set up Ninja build
        run: |
          sudo apt-get update
          sudo apt-get install -y ninja-build

      - name: Execute recursive deployment at level ${{ matrix.level }}
        run: |
          # Configure deployment level
          mkdir -p build/
          echo "{\"level\": ${{ matrix.level }}, \"status\": \"in_progress\"}" > build/level-${{ matrix.level }}.json

          # Run recursive deployment for this level
          ./scripts/ninja-team-deploy.sh \
            --level=${{ matrix.level }} \
            --max-levels=${{ needs.prepare.outputs.recursion_levels }} \
            --team-size=${{ needs.prepare.outputs.team_size }} || exit 1

          # Update status
          echo "{\"level\": ${{ matrix.level }}, \"status\": \"completed\"}" > build/level-${{ matrix.level }}.json

      - name: Upload deployment artifacts
        uses: actions/upload-artifact@v3
        with:
          name: deployment-level-${{ matrix.level }}
          path: build/level-${{ matrix.level }}.json
          retention-days: 1
      - name: Capture deployment logs
        if: failure()
        run: |
          echo "Deployment logs for level ${{ matrix.level }}:"
          cat ninja-team-deploy_*.log

  finalize:
    name: Finalize Deployment
    needs: [prepare, recursive-deployment, build-ninja-agents]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download all deployment artifacts
        uses: actions/download-artifact@v3
        with:
          path: deployment/

      - name: Generate deployment report
        run: |
          echo "# Ninja Team Deployment Report" > deployment-report.md
          echo "## Summary" >> deployment-report.md
          echo "- Team Size: ${{ needs.prepare.outputs.team_size }}" >> deployment-report.md
          echo "- Recursion Levels: ${{ needs.prepare.outputs.recursion_levels }}" >> deployment-report.md
          echo "- Status: ${{ job.status }}" >> deployment-report.md
          echo "- Date: $(date -u)" >> deployment-report.md
          
          echo "## Level Details" >> deployment-report.md
          for level in $(ls deployment/deployment-level-*); do
            echo "- $(cat $level)" >> deployment-report.md
          done

      - name: Upload deployment report
        uses: actions/upload-artifact@v3
        with:
          name: ninja-team-deployment-report
          path: deployment-report.md
          retention-days: 7
