
document.addEventListener('DOMContentLoaded',()=>{const directoryInput=document.getElementById("directoryInput");const organizeButton=document.getElementById("organizeButton");const logDiv=document.getElementById("log");const loader=document.getElementById("loader");function logMessage(message,type='status'){const timestamp=new Date().toLocaleTimeString();const logEntry=document.createElement('div');logEntry.classList.add('log-entry');const timeSpan=document.createElement('span');timeSpan.classList.add('log-timestamp');timeSpan.textContent=`[${timestamp}]`;const messageSpan=document.createElement('span');messageSpan.classList.add(`log-${type}`);messageSpan.textContent=message;logEntry.appendChild(timeSpan);logEntry.appendChild(messageSpan);logDiv.appendChild(logEntry);logDiv.scrollTop=logDiv.scrollHeight;}
logDiv.innerHTML='';logMessage("System initialized. Ready for activation.");organizeButton.addEventListener('click',organizeFiles);async function organizeFiles(){const directoryPath=directoryInput.value.trim();if(!directoryPath){logMessage("Error: Directory path cannot be empty.",'error');directoryInput.focus();directoryInput.style.borderColor="#ff5555";setTimeout(()=>{directoryInput.style.borderColor="#00ffcc";},2000);return;}
if(/[<>:"|?*]/.test(directoryPath)){logMessage("Error: Path contains invalid characters.",'error');directoryInput.focus();directoryInput.style.borderColor="#ff5555";setTimeout(()=>{directoryInput.style.borderColor="#00ffcc";},2000);return;}
logMessage(`Activation signal received for: ${directoryPath}`,'status');organizeButton.disabled=true;loader.style.display='block';try{logMessage("Attempting connection to organization matrix...",'status');const response=await fetch("http://localhost:5000/organize",{method:"POST",headers:{"Content-Type":"application/json",},body:JSON.stringify({directory:directoryPath}),});logMessage(`Connection established. Status: ${response.status}`,'status');let data;try{data=await response.json();}catch(jsonError){const textResponse=await response.text();logMessage(`Error parsing server response: ${jsonError.message}. Server raw response: ${textResponse}`,'error');data={message:`Server returned status ${response.status} but response was not valid JSON.`};}
if(response.ok){logMessage(`Protocol Success: ${data.message |
| 'Operation completed successfully.'}`,'success');}else{logMessage(`Protocol Failure: ${data.message |
| `Server responded with status ${response.status}`}`,'error');}}catch(error){logMessage(`Critical System Error: Unable to connect to the organization matrix. ${error.message}`,'error');console.error("Fetch Error:",error);}finally{organizeButton.disabled=false;loader.style.display='none';logMessage("Protocol sequence complete. Standing by.",'status');}}});