version: '3.8'

services:
  # Main application service
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: fileboss-app
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload
    volumes:
      - .:/app
      - uploads:/app/uploads
      - logs:/app/logs
    ports:
      - "8000:8000"
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - fileboss-network

  # PostgreSQL database
  postgres:
    image: postgres:14-alpine
    container_name: fileboss-postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB: ${POSTGRES_DB:-fileboss}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-fileboss}"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - fileboss-network
    restart: unless-stopped

  # Redis for caching and async tasks
  redis:
    image: redis:7-alpine
    container_name: fileboss-redis
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
    networks:
      - fileboss-network
    restart: unless-stopped

  # PGAdmin for database management
  pgadmin:
    image: dpage/pgadmin4
    container_name: fileboss-pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL:-admin@fileboss.com}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD:-admin123}
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    ports:
      - "5050:80"
    depends_on:
      - postgres
    networks:
      - fileboss-network
    restart: unless-stopped

  # Celery worker for async tasks
  worker:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: fileboss-worker
    command: celery -A app.worker worker --loglevel=info
    volumes:
      - .:/app
    env_file:
      - .env
    depends_on:
      - redis
      - postgres
    networks:
      - fileboss-network
    restart: unless-stopped

  # Celery beat for scheduled tasks
  beat:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: fileboss-beat
    command: celery -A app.worker beat --loglevel=info
    volumes:
      - .:/app
    env_file:
      - .env
    depends_on:
      - redis
      - postgres
    networks:
      - fileboss-network
    restart: unless-stopped

# Networks
networks:
  fileboss-network:
    driver: bridge

# Volumes
volumes:
  postgres_data:
  redis_data:
  pgadmin_data:
  uploads:
  logs:

  redis:
    image: redis:7-alpine
    container_name: casebuilder-redis
    restart: unless-stopped
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
    networks:
      - casebuilder-network

  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: casebuilder-pgadmin
    restart: unless-stopped
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_DEFAULT_EMAIL:-admin@example.com}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_DEFAULT_PASSWORD:-admin}
    ports:
      - "5050:80"
    depends_on:
      - postgres
    networks:
      - casebuilder-network

  # Uncomment to add monitoring with Prometheus and Grafana
  # prometheus:
  #   image: prom/prometheus:latest
  #   container_name: casebuilder-prometheus
  #   restart: unless-stopped
  #   ports:
  #     - "9090:9090"
  #   volumes:
  #     - ./monitoring/prometheus:/etc/prometheus
  #     - prometheus_data:/prometheus
  #   command:
  #     - '--config.file=/etc/prometheus/prometheus.yml'
  #     - '--storage.tsdb.path=/prometheus'
  #   networks:
  #     - casebuilder-network

  # grafana:
  #   image: grafana/grafana:latest
  #   container_name: casebuilder-grafana
  #   restart: unless-stopped
  #   ports:
  #     - "3000:3000"
  #   volumes:
  #     - grafana_data:/var/lib/grafana
  #   environment:
  #     - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER:-admin}
  #     - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
  #   depends_on:
  #     - prometheus
  #   networks:
  #     - casebuilder-network

volumes:
  postgres_data:
  redis_data:
  # prometheus_data:
  # grafana_data:

networks:
  casebuilder-network:
    driver: bridge
